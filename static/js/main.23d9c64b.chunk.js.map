{"version":3,"sources":["components/chat/chuchuchu.jpg","serviceWorker.js","components/tools/Tools.js","components/board/EditableText.js","components/board/Text.js","components/board/Board.js","components/menu/menu-bar-sun.js","components/chat/Name.js","components/chat/Channel.js","components/chat/ChatView.js","components/chat/AppChat.js","components/header/header-bar-sun.js","components/main-sun.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Tools","EditableText","Component","props","changeEditMode","setState","edit","state","handleChange","event","text","target","value","handleKeyDown","key","initialValue","isEditable","className","this","type","onChange","onKeyDown","onDoubleClick","Board","treeData","title","expanded","children","add","bind","concat","style","height","onClick","MenuItem","MenuBar","React","AppChannel","uname","onUpdate_name","keyCode","placeholder","onBlur","updateName","keyUpdateName","openSocket","updateConnected","updateChannel","keyUpdateChannel","connected","onUpdate_connect","channel","onUpdate_channel","socket","io","ChatView","msg","chatList","send","keysend","inputMSG","cursor","emit","on","data","document","querySelector","scrollTo","scrollHeight","changeProps","list","map","item","index","date","Date","chat","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","AppChat","Name","Header","name","HeaderBar","Main","primaryIndex","secondaryInitialSize","percentage","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.23d9c64b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/chuchuchu.079078d7.jpg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\nfunction Tools() {\r\n  return <div>Tools</div>\r\n}\r\n\r\nexport default Tools;","import React, { Component } from 'react';\r\n\r\nclass EditableText extends Component{\r\n    constructor(props){\r\n      super(props)\r\n      this.state = {\r\n        text: props.initialValue,\r\n        isEditable: false\r\n      }\r\n    }\r\n  \r\n  changeEditMode = () => {\r\n    this.setState({\r\n      edit: !this.state.edit\r\n    })\r\n  } // false인 edit의 상태를 true로 바꿔주는 역할\r\n\r\n  handleChange = (event) => {\r\n    this.setState({\r\n      text: event.target.value\r\n    })\r\n  }\r\n  handleKeyDown = (event) => {\r\n    if(event.key === \"Enter\"){\r\n      this.setState({\r\n        edit: !this.state.edit\r\n      }) \r\n  // 만약 입력된 값을 상위 컴포넌트에서 저장/관리한다면, 저장하는 함수를 여기서 실행한다.\r\n    }\r\n  }\r\n  render(){\r\n    return(\r\n      <div className=\"row list\">\r\n      {this.state.edit ? \r\n      (<input className=\"form-control\" type=\"text\" \r\n              value={this.state.text} \r\n              onChange={(event) => this.handleChange(event)} \r\n              onKeyDown = {this.handleKeyDown} />)\r\n      :\r\n      (<span onDoubleClick={() => this.changeEditMode()}>\r\n          {this.state.text}</span>)}\r\n      </div>\r\n  )}\r\n}\r\n\r\nexport default EditableText;","import React, { Component } from 'react';\r\n\r\n//NOT USED\r\n//Temp file\r\n\r\nclass Text extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n        text: \"dummy\"\r\n    };\r\n    this.showinfo = this.showinfo.bind(this);\r\n    this.edit = this.edit.bind(this)\r\n  }\r\n  showinfo(){\r\n      alert(this.state.text)\r\n  }\r\n  edit(){\r\n    this.setState({text: \"dummy changed\"});\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n          {this.state.text}\r\n          \r\n          <button onClick={this.showinfo}>Info</button>\r\n          <button onClick={this.edit}>Edit</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Text;","import React, { Component } from 'react';\r\nimport SortableTree from 'react-sortable-tree';\r\nimport 'react-sortable-tree/style.css';\r\nimport Text from './Text';\r\nimport EditableText from './EditableText';\r\n\r\nclass Board extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      treeData: [\r\n        { title: <EditableText initialValue='hello'/>, expanded: true, children: [{ title: <EditableText initialValue='world'/>}]}\r\n      ]\r\n    };\r\n    this.add = this.add.bind(this)\r\n    //this.showinfo = this.showinfo.bind(this);\r\n    //this.edit = this.edit.bind(this)\r\n  }\r\n  add(){\r\n    var tmp = this.state.treeData;\r\n    this.setState({treeData: this.state.treeData.concat([{ title: <EditableText initialValue='new text box'/>, children: []}])});\r\n  }\r\n  /*showinfo(){\r\n    alert(this.state.treeData);\r\n  }\r\n  edit(){\r\n    alert(' click');\r\n  }*/\r\n  render() {\r\n    return (\r\n      <div style={{ height: 600 }}>\r\n        Board Box\r\n        <button onClick={this.add} >Add</button> \r\n        \r\n        <SortableTree\r\n          treeData={this.state.treeData}\r\n          onChange={treeData => this.setState({ treeData })}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Board;","import React from \"react\";\r\n\r\nconst MenuItem = props => {\r\n  return <div className=\"menu-item\">{props.text}</div>;\r\n};\r\n\r\nexport default class MenuBar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"menu-bar\">\r\n        <MenuItem text=\"File\" />\r\n        <MenuItem text=\"Edit\" />\r\n        <MenuItem text=\"View\" />\r\n        <MenuItem text=\"Image\" />\r\n        <MenuItem text=\"Options\" />\r\n        <MenuItem text=\"Help\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\n  class AppChannel extends Component {\r\n    updateName(event){\r\n      if(event.target.value!==this.props.uname) this.props.onUpdate_name(event.target.value);\r\n    }\r\n    keyUpdateName(event){\r\n      if(event.keyCode===13) {\r\n          if(event.target.value!==this.props.uname) this.props.onUpdate_name(event.target.value);\r\n      }\r\n    }\r\n    render() {\r\n      return (\r\n          <header className=\"Name-header\">\r\n            <h1 className=\"Name-title\">Welcome to cocoMeet</h1>\r\n            <input type=\"text\" className=\"uname\" placeholder=\"user name\" onBlur={this.updateName.bind(this)} onKeyDown={this.keyUpdateName.bind(this)}/>\r\n          </header>\r\n      );\r\n    }\r\n  }\r\n  \r\n  export default AppChannel;","import React, { Component } from 'react';\r\nimport { Input } from 'react-bootstrap';\r\nimport './Channel.css';\r\nimport openSocket from 'socket.io-client';\r\nconst socket = openSocket('http://localhost:4002');\r\n\r\nclass AppChannel extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.updateConnected = this.updateConnected.bind(this)\r\n    this.updateChannel = this.updateChannel.bind(this);\r\n    this.keyUpdateChannel = this.keyUpdateChannel.bind(this);\r\n}\r\n  updateConnected(){\r\n    if(this.props.connected==='False') this.props.onUpdate_connect('True')\r\n  }\r\n  updateChannel(event){\r\n    if(event.target.value!==this.props.channel) this.props.onUpdate_channel(event.target.value);\r\n  }\r\n  keyUpdateChannel(event){\r\n    if(event.keyCode===13) {\r\n        if(event.target.value!==this.props.channel) this.props.onUpdate_channel(event.target.value);\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n        <header className=\"Channel-header\">\r\n          <input type=\"text\" className=\"channel\" placeholder=\"channel name\" onBlur={this.updateChannel} onKeyDown={this.keyUpdateChannel}/>\r\n          <button type=\"button\" className=\"btn btn-primary\" onClick={this.updateConnected(this)}>입장</button>\r\n        </header>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AppChannel;","import React, { Component } from 'react';\r\nimport { Input } from 'react-bootstrap';\r\nimport './ChatView.css';\r\nimport img from './chuchuchu.jpg';\r\n\r\nimport io from 'socket.io-client';\r\n\r\nconst socket = io('http://localhost:4002/');\r\n\r\nclass ChatView extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {msg:'', uname: this.props.uname, channel:this.props.channel, chatList:[]};\r\n        this.send = this.send.bind(this);\r\n        this.keysend = this.keysend.bind(this);\r\n        this.inputMSG = this.inputMSG.bind(this);\r\n    }\r\n    componentDidMount(){\r\n        let cursor=this;\r\n        socket.emit('channelJoin', {channel:this.state.channel, uname:this.state.uname});\r\n        socket.on('receive', function (data) {\r\n            cursor.setState({chatList:cursor.state.chatList.concat([data])});\r\n            document.querySelector(\".chattingView-chat\").scrollTo(0,document.querySelector(\".chattingView-chat\").scrollHeight);\r\n        });\r\n    }\r\n    componentWillReceiveProps(changeProps){\r\n        socket.emit('channelLeave', {channel:this.state.channel, uname:this.state.uname});\r\n        this.setState({channel:changeProps.channel, uname:changeProps.uname},()=>{\r\n            this.setState({chatList:[]});\r\n            socket.emit('channelJoin', {channel:this.state.channel, uname:this.state.uname});\r\n        });\r\n    }\r\n    send(){\r\n        socket.emit('send',{msg:this.state.msg, channel:this.state.channel, uname:this.state.uname});\r\n        this.setState({msg:''});\r\n        document.querySelector(\".inputMsg\").value=\"\";\r\n    }\r\n    keysend(event){\r\n        if(event.keyCode===13) {\r\n            socket.emit('send',{msg:this.state.msg, channel:this.state.channel, uname:this.state.uname});\r\n            this.setState({msg:''});\r\n            document.querySelector(\".inputMsg\").value=\"\";\r\n        }\r\n    }\r\n    inputMSG(event) {\r\n        this.setState({ msg: event.target.value });\r\n    }\r\n    render() {\r\n        let list = this.state.chatList.map((item, index) =>{\r\n            let date= new Date(item.chat.date);\r\n            return(\r\n                <div key={index}>\r\n                    {item.chat.uname!=null?\r\n                    <div className=\"chattingView-header\">\r\n                        <div>{item.chat.uname}</div>\r\n                        <div>{date.getFullYear()}년 {date.getMonth()+1}월 {date.getDate()}일 {date.getHours()}:{date.getMinutes()}:{date.getSeconds()}</div>\r\n                    </div>:null}\r\n                    <div className=\"chattingView-msg\">{item.chat.msg}</div>\r\n                </div>\r\n            )\r\n        });\r\n        return (\r\n            <div className=\"body\">\r\n                <div className=\"chattingView-chatbox\">\r\n                <div className=\"chattingView-chat\">{list}</div>\r\n                </div>\r\n                <div className=\"input-group chattingView-input\">\r\n                    <input type=\"text\" className=\"form-control inputMsg\" placeholder=\"input message...\"  onChange={this.inputMSG} onKeyDown={this.keysend}/>\r\n                    <button type=\"button\" className=\"btn btn-primary\" onClick={this.send}>입력</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ChatView;","import React, { Component } from 'react';\r\nimport Name from './Name'\r\nimport Channel from './Channel';\r\nimport ChatView from './ChatView';\r\n\r\nclass AppChat extends Component { \r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {channel:'cocomeet', uname:'Yonsei', connected:'False'};\r\n    this.updateName = this.updateName.bind(this);\r\n    this.updateChannel = this.updateChannel.bind(this);\r\n    this.updateConnected = this.updateConnected.bind(this);\r\n  }\r\n  updateName(uname){\r\n    this.setState({uname: uname});\r\n  }\r\n  updateChannel(channel){\r\n    this.setState({channel: channel});\r\n  }\r\n  updateConnected(value){\r\n    this.setState({connected:value});\r\n  }\r\n  render() {\r\n      return (\r\n        <div>\r\n            <Name uname = {this.state.uname} onUpdate_name={this.updateName} />\r\n            <Channel channel={this.state.channel} connected={this.state.connected} onUpdate_channel={this.updateChannel} onUpdate_connect={this.updateConnected} />\r\n            <ChatView uname = {this.state.uname} channel={this.state.channel} connected={this.state.connected}/>\r\n        </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default AppChat","import React from \"react\";\r\n\r\nconst Header = props => {\r\n  return <div className=\"header-bar\">{props.name}</div>;\r\n};\r\n\r\nexport default class HeaderBar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"menu-bar\">\r\n        <Header name=\"CoCoMeet\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Tools from './tools/Tools';\r\nimport Board from './board/Board';\r\nimport MenuBar from \"./menu/menu-bar-sun\";\r\nimport AppChat from \"./chat/AppChat\";\r\nimport HeaderBar from \"./header/header-bar-sun\";\r\nimport SplitterLayout from 'react-splitter-layout';\r\nimport 'react-splitter-layout/lib/index.css';\r\n\r\nclass Main extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <HeaderBar />\r\n        <MenuBar />\r\n        <SplitterLayout primaryIndex={1} secondaryInitialSize={200}>\r\n          <Tools />\r\n          <SplitterLayout secondaryInitialSize={350}>\r\n            <SplitterLayout percentage='true'><Board /><Board /></SplitterLayout>\r\n            <AppChat/>\r\n          </SplitterLayout>\r\n        </SplitterLayout>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport styles from \"./styles/styles.scss\";\r\nimport * as serviceWorker from './serviceWorker';\r\nimport Main from './components/main-sun';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Main />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}